//A180018 Gordillo Hernández Mario Eduardo
//A180595 Lopez Tevera Alberto Isai
//A181062 Cameras Hernandez Jaquelinne del Carmen

#include<iostream>
#include<math.h>
#include<GL/glut.h>
using namespace std;
//variables para rotar
float c = 10, s1 = 1.1, s2 = 0.9, r = 0.05, xc = 224, yc = 215;
//Polígono
float A[183][3] = {
	{24,17,1},{59,22,1},{77,32,1},{359,231,1},{354,158,1},{403,80,1},{453,164,1},{447,228,1},{521,178,1},{520,126,1},{551,172,1},{670,150,1},{655,191,1},{773,234,1},{762,278,1},{847,292,1},{840,313,1},{923,379,1},{908,405,1},{987,463,1},{962,493,1},{1080,571,1},{1050,615,1},{1127,714,1},{1035,743,1},{935,768,1},{773,1009,1},{561,1065,1},{598,974,1},{602,809,1},{468,628,1},{407,673,1},{327,673,1},{242,714,1},{189,769,1},{114,770,1},{55,696,1},{68,631,1},{250,398,1},{206,392,1},{217,346,1},{281,287,1},{35,54,1},{24,631,1},{75,59,1},{35,54,1},{75,59,1},{77,32,1},{75,59,1},{359,291,1},{359,231,1},{359,291,1},{281,287,1},{359,291,1},{217,346,1},{359,291,1},{206,392,1},{359,291,1},{250,398,1},{359,291,1},{312,404,1},{250,398,1},{267,463,1},{312,404,1},{419,387,1},{359,291,1},{417,260,1},{419,387,1},{354,470,1},{267,463,1},{68,631,1},{157,655,1},{55,696,1},{157,655,1},{114,770,1},{157,655,1},{189,768,1},{157,655,1},{245,714,1},{157,655,1},{354,470,1},{327,673,1},{354,470,1},{407,673,1},{354,470,1},{468,628,1},{419,387,1},{538,424,1},{468,628,1},{538,424,1},{773,1009,1},{602,809,1},{538,424,1},{768,377,1},{935,768,1},{768,377,1},{1035,743,1},{768,377,1},{1127,714,1},{768,377,1},{1050,571,1},{768,377,1},{1080,571,1},{768,377,1},{962,493,1},{768,977,1},{606,262,1},{840,313,1},{606,262,1},{447,228,1},{417,260,1},{447,228,1},{773,234,1},{447,228,1},{655,191,1}
};
float B[183][3] = {
	{24,17,1},{59,22,1},{77,32,1},{359,231,1},{354,158,1},{403,80,1},{453,164,1},{447,228,1},{521,178,1},{520,126,1},{551,172,1},{670,150,1},{655,191,1},{773,234,1},{762,278,1},{847,292,1},{840,313,1},{923,379,1},{908,405,1},{987,463,1},{962,493,1},{1080,571,1},{1050,615,1},{1127,714,1},{1035,743,1},{935,768,1},{773,1009,1},{561,1065,1},{598,974,1},{602,809,1},{468,628,1},{407,673,1},{327,673,1},{242,714,1},{189,769,1},{114,770,1},{55,696,1},{68,631,1},{250,398,1},{206,392,1},{217,346,1},{281,287,1},{35,54,1},{24,631,1},{75,59,1},{35,54,1},{75,59,1},{77,32,1},{75,59,1},{359,291,1},{359,231,1},{359,291,1},{281,287,1},{359,291,1},{217,346,1},{359,291,1},{206,392,1},{359,291,1},{250,398,1},{359,291,1},{312,404,1},{250,398,1},{267,463,1},{312,404,1},{419,387,1},{359,291,1},{417,260,1},{419,387,1},{354,470,1},{267,463,1},{68,631,1},{157,655,1},{55,696,1},{157,655,1},{114,770,1},{157,655,1},{189,768,1},{157,655,1},{245,714,1},{157,655,1},{354,470,1},{327,673,1},{354,470,1},{407,673,1},{354,470,1},{468,628,1},{419,387,1},{538,424,1},{468,628,1},{538,424,1},{773,1009,1},{602,809,1},{538,424,1},{768,377,1},{935,768,1},{768,377,1},{1035,743,1},{768,377,1},{1127,714,1},{768,377,1},{1050,571,1},{768,377,1},{1080,571,1},{768,377,1},{962,493,1},{768,977,1},{606,262,1},{840,313,1},{606,262,1},{447,228,1},{417,260,1},{447,228,1},{773,234,1},{447,228,1},{655,191,1}
};
float T[3][3] =  { { 1,0,0 }, { 0,1,0 }, { c,c,1 } };
//pivote
float pivote[3] = {xc,yc,1};
//variables para trasladar
float der[3][3] = { {1,0,0},{0,1,0},{c,0,1} };
float izq[3][3] = { {1,0,0},{0,1,0},{-c,0,1} };
float abj[3][3] = { {1,0,0},{0,1,0},{0,-c,1} };
float arr[3][3] = { {1,0,0},{0,1,0},{0,c,1} };
//Pintar lineas
void pintalinea(float x1, float y1, float x2, float y2) {
	glLineWidth(1.0);
	glColor3f(1, 0, 0);
	glBegin(GL_LINES);
	glVertex2f(x1, y1);
	glVertex2f(x2, y2);
	glEnd();
}
//matriz escalar
void figura() {
	glClear(GL_COLOR_BUFFER_BIT);
	for (int i = 1; i < 184; i++) {
		pintalinea(A[i - 1][0], A[i - 1][1], A[i][0], A[i][1]);
	}
	glFlush();
}
//matriz rotacion
void transformadas(float traslacion[3][3]) {
	//igualamos las mattices para poder trabajar cada lado y ax sin alterar la matriz original
	glClear(GL_COLOR_BUFFER_BIT);
	for (int i = 1; i < 185; i++) {
		A[i - 1][0] = (A[i - 1][0] * traslacion[0][0]) + (A[i - 1][1] * traslacion[1][0]) + (A[i - 1][2] * traslacion[2][0]);
		A[i - 1][1] = (A[i - 1][0] * traslacion[0][1]) + (A[i - 1][1] * traslacion[1][1]) + (A[i - 1][2] * traslacion[2][1]);
		A[i - 1][2] = (A[i - 1][0] * traslacion[0][2]) + (A[i - 1][1] * traslacion[1][2]) + (A[i - 1][2] * traslacion[2][2]);
	}
	figura();
	pivote[0] = (pivote[0] * traslacion[0][0]) + (pivote[1] * traslacion[1][0]) + (pivote[2] * traslacion[2][0]);
	pivote[1] = (pivote[0] * traslacion[0][1]) + (pivote[1] * traslacion[1][1]) + (pivote[2] * traslacion[2][1]);
	pivote[2] = 1;

}
//enviamos como parametro la letra que deseemos
void KeyInput(unsigned char key, int x, int y) {
	float S1[3][3] = { {s1,0,0},{0,s1,0},{(pivote[0] * (1 - s1)),(pivote[1] * (1 - s1)),1} };
	float S2[3][3] = { {s2,0,0},{0,s2,0},{(pivote[0] * (1 - s2)),(pivote[1] * (1 - s2)),1} };
	float Ri[3][3] = { {cos(r),sin(r),0},{-sin(r),cos(r),0},{pivote[0] * (1 - cos(r)) + pivote[1] * sin(r),pivote[1] * (1 - cos(r)) - pivote[0] * sin(r),1} };
	float Rd[3][3] = { {cos(-r),sin(-r),0},{-sin(-r),cos(-r),0},{pivote[0] * (1 - cos(-r)) + pivote[1] * sin(-r),pivote[1] * (1 - cos(-r)) - pivote[0] * sin(-r),1} };

	glClear(GL_COLOR_BUFFER_BIT);
	switch (key){
	case'o':
		for (int i = 0; i < 184; i++) {
			for ( int j = 0; j <= 1; j++){
				A[i][j] = B[i][j];
			}
			figura();
		}
		pivote[0] = xc;
		pivote[1] = yc;
		break;
	case'z':
		transformadas(S1);
		break;
	case'x':
		transformadas(S2);
		break;
	case'q':
		transformadas(Ri);
		break;
	case'e':
		transformadas(Rd);
		break;
	}
	//actualizamos cada dato de las matrices dependiendo de la funcion por medio de la letra
	glutPostRedisplay();
}
//enviamos como parametro la letra que deseemos
void specialkeyInput(int key, int x, int y) {
	int i = 0;
	if (key == GLUT_KEY_DOWN) {
		transformadas(abj);
	}
	if (key == GLUT_KEY_UP) {
		transformadas(arr);
	}
	if (key == GLUT_KEY_LEFT) {
		transformadas(izq);
	}
	if (key == GLUT_KEY_RIGHT) {
		transformadas(der);
	}
	glutPostRedisplay();
}
void menu() {//menu de instrucciones de las funciones que tiene cada letra
	cout << "TECLAS PARA TRASLADAR" << endl;
	cout << "\t Usar las flechas del teclado" << endl;
	cout << "TECLAS PARA ROTAR" << endl;
	cout << "\te= rotar 10 grados a favor de las manecillas del reloj" << endl;
	cout << "\tq= rotar 10 grados encontra de las manecilas del reloj" << endl;
	cout << endl;
	cout << "TECLAS PARA MODIFICAR EL TAMAÑO" << endl;
	cout << "\tz= aumentar tamaño" << endl;
	cout << "\tx= disminuir tamaño" << endl;
}

//FUNCION PRINCIPAL
int main(int argc, char** argv) {
	//INICIALIZAR LA LIBRERIA OPENGL CON SUS PARAMETROS
	glutInit(&argc, argv);
	//CONFIGURAR EL MODO DE PANTALLA, ENVIANDO 2 PARAMETROS EL COLOR Y EL BUFFER
	//A UTILIZAR
	glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
	//CONFIGURAMOS EL ANCHO Y ALTO DE LA VENTANA
	glutInitWindowSize(800, 600);
	//CREAR VENTANA Y DR UN TITULO
	glutCreateWindow("Transformaciones");
	glClearColor(0, 0, 0, 0);
	gluOrtho2D(0, 800, 0, 600);
	//llamamos la funcion dps
	glutDisplayFunc(figura);
	//llamamos la funcion menu
	menu();
	//funcion para hacer uso del teclado
	glutKeyboardFunc(KeyInput);
	glutSpecialFunc(specialkeyInput);
	//FUNCION PARA REPETIR EL CICLO
	glutMainLoop();
	return 0;
}
